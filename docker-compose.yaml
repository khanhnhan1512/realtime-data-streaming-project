services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    # volumes:
    #   - zookeeper-data:/var/lib/zookeeper/data
    #   - zookeeper-logs:/var/lib/zookeeper/log
    healthcheck:
      test: ['CMD', 'bash', '-c', "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - confluent

  broker:
    image: confluentinc/cp-server:7.4.0
    hostname: broker
    container_name: broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - 9092:9092
      - 9101:9101
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT, PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema_registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'false'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    # volumes:
    #   - kafka-data:/var/lib/kafka/data
    networks:
      - confluent
    healthcheck:
      test: ['CMD', 'bash', '-c', 'nc -z localhost 9092']
      interval: 10s
      timeout: 5s
      retries: 5
    
  schema_registry:
    image: confluentinc/cp-schema-registry:7.4.0
    hostname: schema-registry
    container_name: schema_registry
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - 8081:8081
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - confluent
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8081']
      interval: 30s
      timeout: 10s
      retries: 5

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.4.0
    hostname: control-center
    container_name: control-center
    depends_on:
      broker: 
        condition: service_healthy
      schema_registry:
        condition: service_healthy
    ports:
      - 9021:9021
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONFLUENT_METRICS_ENABLE: 'false'
      PORT: 9021
    networks:
      - confluent
    healthcheck:
      test: ['CMD', 'curl', '-f', "http://localhost:9021/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # postgres:
  #   image: postgres:14.19
  #   container_name: airflow-postgres
  #   environment:
  #     POSTGRES_USER: airflow
  #     POSTGRES_PASSWORD: airflow
  #     POSTGRES_DB: airflow
  #   volumes:
  #     - postgres-data:/var/lib/postgresql/data
  #   logging:
  #     options:
  #       max-size: 10m
  #       max-file: "3"
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U airflow"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   networks:
  #     - confluent

  # airflow-init:
  #   image: custom-airflow:latest
  #   container_name: airflow-init
  #   command: ["version"]
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   environment:
  #     AIRFLOW__CORE__EXECUTOR: LocalExecutor
  #     AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
  #     AIRFLOW__CORE__FERNET_KEY: ''
  #     AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
  #     AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
  #     AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
  #     AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
  #     AIRFLOW__CORE__DAG_DISCOVERY_SAFE_MODE: 'false'
  #     AIRFLOW__DAG_PROCESSOR__REFRESH_INTERVAL: 30
  #     _AIRFLOW_DB_MIGRATE: 'true'
  #     _AIRFLOW_WWW_USER_CREATE: 'true'
  #     _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
  #     _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
  #   user: "0:0"
  #   networks:
  #     - confluent

  # airflow-apiserver:
  #   image: custom-airflow:latest
  #   container_name: airflow-apiserver
  #   entrypoint: ['/opt/airflow/script/entrypoint.sh']
  #   command: ["api-server"]
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     airflow-init:
  #       condition: service_completed_successfully
  #     broker:
  #       condition: service_healthy  # Wait for Kafka to be ready
  #   environment:
  #     LOAD_EX: n
  #     AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
  #     AIRFLOW__CORE__EXECUTOR: LocalExecutor
  #     AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
  #     AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
  #     AIRFLOW__CORE__DAG_DISCOVERY_SAFE_MODE: 'false'
  #     AIRFLOW__DAG_PROCESSOR__REFRESH_INTERVAL: 30
  #     AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT: 60
  #     AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
  #     AIRFLOW_WEBSERVER_SECRET_KEY: this_is_a_very_secured_key
  #     POSTGRES_HOST: postgres
  #     POSTGRES_PORT: 5432
  #     # Kafka environment variables for better connection reliability
  #     KAFKA_BOOTSTRAP_SERVERS: broker:29092
  #   logging:
  #     options:
  #       max-size: 10m
  #       max-file: "3"
  #   ports:
  #     - 8000:8080
  #   healthcheck:
  #     test: ['CMD-SHELL', "curl -f http://localhost:8080/ || exit 1"]
  #     interval: 30s
  #     timeout: 30s
  #     retries: 3
  #   networks:
  #     - confluent

  # airflow-scheduler:
  #   image: custom-airflow:latest
  #   container_name: airflow-scheduler
  #   entrypoint: ["/opt/airflow/script/entrypoint.sh"]
  #   command: ["scheduler"]
  #   depends_on:
  #     postgres:
  #       condition: service_healthy  
  #     airflow-init:
  #       condition: service_completed_successfully
  #     broker:
  #       condition: service_healthy  # Wait for Kafka to be ready
  #   environment:
  #     AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
  #     AIRFLOW__CORE__EXECUTOR: LocalExecutor
  #     AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
  #     AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
  #     AIRFLOW__CORE__DAG_DISCOVERY_SAFE_MODE: 'false'
  #     AIRFLOW__DAG_PROCESSOR__REFRESH_INTERVAL: 30
  #     AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT: 60
  #     AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
  #     AIRFLOW__CORE__TASK_FAIL_FAST: 'true'  # Fail fast on task errors
  #     AIRFLOW_WEBSERVER_SECRET_KEY: this_is_a_very_secured_key
  #     POSTGRES_HOST: postgres
  #     POSTGRES_PORT: 5432
  #     # Kafka environment variables for better connection reliability
  #     KAFKA_BOOTSTRAP_SERVERS: broker:29092
  #   networks:
  #     - confluent

# volumes:
#   # zookeeper-data:
#   # zookeeper-logs:
#   # kafka-data:
#   postgres-data:

networks:
  confluent:
    driver: bridge